From 26f18b33a007254a2b75b4c221f8588f51888ff0 Mon Sep 17 00:00:00 2001
From: "i.MX Release" <imx.release@nxp.com>
Date: Thu, 1 May 2025 11:36:01 -0500
Subject: [PATCH] CMakeLists.txt: Fix python component search failure

Call a fallback mechanism to exhaust search options before failing due to missing Python components.
In case find_package(Python ...) fails to find all the required components, use heuristics from the build
environment to search the missing paths, and run a second find_package to set the remaining package variables.
It mitigates the issue of malformed paths/hints in find_* CMake commands when the environment is complex
(e.g.: cross-compilation).

Fixes:
| CMake Error at onnxruntime_python.cmake:193 (target_link_libraries):
|   Target "onnxruntime_pybind11_state" links to:
|
|     Python::NumPy
|
|   but the target was not found.  Possible reasons include:

Upstream-Status: Pending
Signed-off-by: Neena Busireddy <neenareddy.busireddy@nxp.com>
---
 cmake/CMakeLists.txt | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index e9c6a5c23..909edf3d1 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -678,6 +678,40 @@ if (onnxruntime_BUILD_SHARED_LIB OR onnxruntime_ENABLE_PYTHON)
       find_package(Python 3.10 COMPONENTS Interpreter Development NumPy)
     else()
       find_package(Python 3.10 COMPONENTS Interpreter Development.Module NumPy)
+      # Call a fallback mechanism to exhaust search options before failing due to missing Python components.
+      # In case find_package(Python ...) fails to find all the required components, use heuristics from the build
+      # environment to search the missing paths, and run a second find_package to set the remaining package variables.
+      # It mitigates the issue of malformed paths/hints in find_* CMake commands when the environment is complex
+      # (e.g.: cross-compilation).
+      if((NOT Python_INCLUDE_DIRS OR NOT Python_NumPy_INCLUDE_DIRS) AND Python_EXECUTABLE AND CMAKE_CROSSCOMPILING)
+        message(WARNING "Incomplete Python search. Try to find specific paths with heuristics.")
+        include(path_utils.cmake)
+        # Find Python include
+        if(DEFINED ENV{OECORE_NATIVE_SYSROOT} AND DEFINED ENV{OECORE_TARGET_SYSROOT})
+          # Find Python include dir from Python_EXECUTABLE using hardcoded SDK sysroot structure
+          execute_process(
+            COMMAND ${Python_EXECUTABLE} -c "from sysconfig import get_paths as gp; print(gp()['include'])"
+            OUTPUT_VARIABLE Python_INCLUDE_DIR
+            ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE
+          )
+          string(REPLACE "x86_64-pokysdk-linux" "armv8a-poky-linux" Python_INCLUDE_DIR ${Python_INCLUDE_DIR})
+        else()
+          get_parent_directory(${Python_EXECUTABLE} 2 Python_USR_PATH)
+          string(REPLACE "recipe-sysroot-native" "recipe-sysroot" Python_USR_PATH ${Python_USR_PATH})
+          file(GLOB Python_INCLUDE_DIR_CANDIDATES "${Python_USR_PATH}/include/python*")
+          list(GET Python_INCLUDE_DIR_CANDIDATES 0 Python_INCLUDE_DIR)
+        endif()
+        message(STATUS "Target Python include path: ${Python_INCLUDE_DIR}")
+        # Find NumPy include
+        if (NOT Python_NumPy_INCLUDE_DIRS)
+          get_parent_directory(${Python_INCLUDE_DIR} 1 Python_USR_PATH)
+          file(GLOB Python_NumPy_INCLUDE_DIR_CANDIDATES "${Python_USR_PATH}/lib/*/site-packages/numpy/core/include")
+          list(GET Python_NumPy_INCLUDE_DIR_CANDIDATES 0 Python_NumPy_INCLUDE_DIR)
+          message(STATUS "Target Numpy include path: ${Python_NumPy_INCLUDE_DIR}")
+        endif()
+          # Relaunch find
+        find_package(Python 3.8 COMPONENTS Interpreter Development.Module NumPy)
+      endif()
     endif()
     message("Numpy version: ${Python_NumPy_VERSION}")
     if(Python_NumPy_VERSION VERSION_LESS "2.0.0")
-- 
2.34.1

